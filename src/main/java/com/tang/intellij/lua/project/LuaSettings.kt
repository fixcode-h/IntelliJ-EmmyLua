/*
 * Copyright (c) 2017. tangzx(love.tangzx@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.tang.intellij.lua.project

import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.components.PersistentStateComponent
import com.intellij.openapi.components.State
import com.intellij.openapi.components.Storage
import com.intellij.openapi.project.Project
import com.intellij.openapi.project.ProjectManager
import com.intellij.util.xmlb.XmlSerializerUtil
import com.tang.intellij.lua.Constants
import com.tang.intellij.lua.lang.LuaLanguageLevel
import java.io.File
import java.nio.charset.Charset

/**
 *
 * Created by tangzx on 2017/6/12.
 */
@State(name = "LuaSettings", storages = [(Storage("emmy.xml"))])
class LuaSettings : PersistentStateComponent<LuaSettings> {
    //自定义require函数，参考constructorNames
    var requireLikeFunctionNames: Array<String> = arrayOf("require")

    var constructorNames: Array<String> = arrayOf("new", "get")

    //Doc文档严格模式，对不合法的注解报错
    var isStrictDoc: Boolean = false

    //在未匹配end的statement后回车会自动补全
    var isSmartCloseEnd: Boolean = true

    //在代码完成时使用参数完成模板
    var autoInsertParameters: Boolean = false

    var isShowWordsInFile: Boolean = true

    // Throw errors if specified and found types do not match
    var isEnforceTypeSafety: Boolean = false

    var isNilStrict: Boolean = false

    var isRecognizeGlobalNameAsType = true

    var additionalSourcesRoot = arrayOf<String>()

    /**
     * 使用泛型
     */
    var enableGeneric: Boolean = false

    /**
     * (KB)
     */
    var tooLargerFileThreshold = 1024

    var attachDebugDefaultCharsetName = "UTF-8"

    var attachDebugCaptureStd = true

    var attachDebugCaptureOutput = true

    /**
     * Lua language level
     */
    var languageLevel = LuaLanguageLevel.LUA53

    /**
     * Project type for Lua development
     */
    var projectType = LuaProjectType.UNREAL_ENGINE

    /**
     * UE project file path (.uproject)
     */
    var ueProjectPath = ""

    /**
     * Custom Lua file path for emmyHelper.lua
     */
    var customEmmyHelperPath = ""

    /**
     * Enable UE IntelliSense generation
     */
    var enableUEIntelliSense = true

    /**
     * UE进程名称列表，用于调试器进程过滤
     */
    var ueProcessNames: Array<String> = arrayOf(
        "UnrealEngine", "UE4Editor", "UE5Editor", "UnrealEditor"
    )

    /**
     * 调试器进程黑名单，用于过滤不需要显示的系统进程
     */
    var debugProcessBlacklist: Array<String> = arrayOf(
        "winlogon", "csrss", "wininit", "services"
    )

    /**
     * 是否启用自定义文件模板
     */
    var enableCustomFileTemplate: Boolean = true

    /**
     * 自定义文件模板内容
     */
    var customFileTemplate: String = "---\n--- Generated by EmmyLua(https://github.com/EmmyLua)\n--- Created by \${USER}.\n--- DateTime: \${DATE} \${TIME}\n---\n\n---@class \${FILE_NAME}\nlocal \${FILE_NAME} = {}\n\nreturn \${FILE_NAME}"

    /**
     * 是否启用文件名替换功能
     */
    var enableFileNameReplacement: Boolean = true

    /**
     * 文件名替换占位符（默认为 ${FILE_NAME}）
     */
    var fileNamePlaceholder: String = "\${FILE_NAME}"

    override fun getState(): LuaSettings {
        return this
    }

    override fun loadState(luaSettings: LuaSettings) {
        XmlSerializerUtil.copyBean(luaSettings, this)
    }

    var constructorNamesString: String
        get() {
            return constructorNames.joinToString(";")
        }
        set(value) {
            constructorNames = value.split(";").map { it.trim() }.toTypedArray()
        }

    val attachDebugDefaultCharset: Charset get() {
        return Charset.forName(attachDebugDefaultCharsetName) ?: Charset.forName("UTF-8")
    }
    var requireLikeFunctionNamesString: String
        get() {
            return requireLikeFunctionNames.joinToString(";")
        }
        set(value) {
            requireLikeFunctionNames = value.split(";").toTypedArray()
        }

    var ueProcessNamesString: String
        get() {
            return ueProcessNames.joinToString(";")
        }
        set(value) {
            ueProcessNames = value.split(";").filter { it.isNotBlank() }.toTypedArray()
        }

    var debugProcessBlacklistString: String
        get() {
            return debugProcessBlacklist.joinToString(";")
        }
        set(value) {
            debugProcessBlacklist = value.split(";").filter { it.isNotBlank() }.toTypedArray()
        }

    /**
     * 自动检测当前项目中的.uproject文件路径
     * 仅在判定为Lua项目且IDEA打开时在后台执行查找
     */
    fun autoDetectUProjectPath(): String? {
        // 检查是否为Lua项目且启用了UE智能感知
        if (projectType != LuaProjectType.UNREAL_ENGINE) {
            return null
        }
        
        // 获取当前打开的项目
        val openProjects = ProjectManager.getInstance().openProjects
        if (openProjects.isEmpty()) {
            return null
        }
        
        // 遍历所有打开的项目，查找.uproject文件
        for (project in openProjects) {
            val projectPath = project.basePath ?: continue
            val uprojectPath = findUProjectFileRecursively(File(projectPath))
            if (uprojectPath != null) {
                return uprojectPath
            }
        }
        
        return null
    }
    
    /**
     * 递归向上查找.uproject文件
     * 仅在每个文件夹的根目录查找
     */
    private fun findUProjectFileRecursively(directory: File): String? {
        var currentDir = directory
        
        // 向上递归查找，最多查找10层以避免无限循环
        var depth = 0
        while (currentDir.exists() && currentDir.isDirectory && depth < 10) {
            // 在当前目录查找.uproject文件
            val uprojectFiles = currentDir.listFiles { file ->
                file.isFile && file.name.endsWith(".uproject")
            }
            
            if (uprojectFiles != null && uprojectFiles.isNotEmpty()) {
                // 返回第一个找到的.uproject文件的绝对路径
                return uprojectFiles[0].absolutePath
            }
            
            // 移动到父目录
            val parentDir = currentDir.parentFile
            if (parentDir == null || parentDir == currentDir) {
                break
            }
            currentDir = parentDir
            depth++
        }
        
        return null
    }

    companion object {

        val instance: LuaSettings
            get() = ApplicationManager.getApplication().getService(LuaSettings::class.java)

        fun isConstructorName(name: String): Boolean {
            return instance.constructorNames.contains(name)
        }

        fun isRequireLikeFunctionName(name: String): Boolean {
            return instance.requireLikeFunctionNames.contains(name) || name == Constants.WORD_REQUIRE
        }
    }
}
