#
# Copyright (c) 2017. tangzx(love.tangzx@qq.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
livetemplate.description.func=function functionName() end
livetemplate.description.lfunc=local function functionName() end
livetemplate.description.closure=function() end
livetemplate.description.for-loop=for i = 1, 10 do end
livetemplate.description.if-end=if expr then end
livetemplate.description.if-else=if expr then else end
livetemplate.description.else-if=elseif expr then
livetemplate.description.for-i=for i, v in ipairs(expr) do end
livetemplate.description.for-p=for k, v in pairs(expr) do end
livetemplate.description.param_sig=param signature
inspection.duplicate_class=Duplicate class found in the file: {0}
inspection.empty_for=Empty for body
inspection.empty_do=Empty do body
inspection.empty_while=Empty while body
run.attach.start_info=Try attach to \"{0}\" pid:{1} with {2} debugger.
run.attach.launch_info=Try launch program:{0} with {1} debugger.
ui.luacheck.command_line=Command Line
ui.luacheck.name=LuaCheck
ui.luacheck.download=Download LuaCheck
ui.luacheck.command_line_options=Command line options
ui.settings.constructor_names=&Constructor names:
ui.settings.strict_doc=Strict &doc
ui.settings.smart_close_end=&Smart close 'end'
ui.settings.recognize_global_name_as_type=Recognize global name as type
ui.settings.enable_generic=Enable generic
ui.settings.additional_root=Lua Additional Sources Root
ui.settings.show_words=Show &words in file
ui.settings.type_safety=Type safety
ui.settings.enforce_type_safety=Enforce type safety
ui.settings.strict_nil_checks=Strict nil checks
ui.settings.require_like_function_names=&Require-like function names:
action.sort.alphabetically=Sort Alphabetically
action.sort.alphabetically_desc=Sort alphabetically

# Code Style Settings
codestyle.spacing.table=Table spacing
codestyle.spacing.table.around_assign=Around assignment in table
codestyle.spacing.table.around_comma=Around comma in table
codestyle.spacing.function_call=Function call spacing
codestyle.spacing.function_call.around_parentheses=Around parentheses in function call
codestyle.spacing.function_call.around_comma=Around comma in function call
codestyle.spacing.comment=Comment spacing
codestyle.spacing.comment.before_line=Before line comment
codestyle.spacing.comment.after_line=After line comment

codestyle.blank_lines.require=Require statements
codestyle.blank_lines.require.before=Before require statement
codestyle.blank_lines.require.after=After require statement
codestyle.blank_lines.function=Functions
codestyle.blank_lines.function.before=Before function
codestyle.blank_lines.function.after=After function

codestyle.wrapping.table=Table alignment
codestyle.wrapping.table.align_fields=Align table fields
codestyle.wrapping.table.wrap_after_comma=Wrap after comma
codestyle.wrapping.comment=Comment alignment
codestyle.wrapping.comment.align_line=Align line comments
codestyle.wrapping.loop=Loop statement alignment
codestyle.wrapping.loop.align_body=Align loop body
codestyle.wrapping.function_call=Function call alignment
codestyle.wrapping.function_call.align_parameters=Align function parameters
codestyle.wrapping.function_call.wrap_after_comma=Wrap after comma in function call

# Action texts
action.copy_lua_require_path=Copy Lua Require Path
action.copy_lua_relative_path=Copy Lua Relative Path

# Debugger settings
debugger.stop_on_entry=Stop on entry
debugger.use_c_hook=Use C Hook
debugger.transport_type=Transport type:
debugger.host=Host:
debugger.port=Port:
debugger.log_level=Log level:
debugger.transport.tcp_client=TCP Client
debugger.transport.tcp_server=TCP Server
plugin.description.chinese_community=Chinese users can join QQ group 9850775 for communication and bug reports

# Debug log messages
debug.log.debug=Debug log
debug.log.connection=Connection status log
debug.log.error=Error log
debug.log.tcp_client_connect=TCP client connecting to {0}:{1}
debug.log.tcp_server_listen=TCP server listening on port {0}
debug.log.receive_protocol=Received protocol: {0}
debug.log.send_protocol=Sent protocol: {0}
debug.log.parse_failed=Message parsing failed: {0}
debug.log.send_failed=Message sending failed: {0}
debug.log.connection_lost=Connection lost detected
debug.log.client_connected=Client connected: {0}
debug.log.client_disconnected=Client disconnected detected
debug.log.server_start_failed=TCP server startup failed: {0}
debug.log.server_close_failed=TCP server close failed: {0}
debug.log.client_close_failed=TCP client close failed: {0}

# Debug process messages
debug.session_initialized=Debug session initialized
debug.transport_info=Transport info: {0}
debug.connection_status=Connection status: {0}
debug.connected=Connected
debug.disconnected=Disconnected
debug.transport_start_failed=Transport startup failed: {0}
debug.plugin_path=Plugin path: {0}
debug.plugin_descriptor_null=Plugin descriptor is null
debug.get_plugin_path_failed=Failed to get plugin path: {0}
debug.init_complete=Initialization complete - HookLib:{0}, Loadstring:{1}, B64:{2}
debug.send_breakpoints=Sending existing breakpoints: {0}
debug.connection_lost_stop=Connection lost, stopping debug session
debug.session_stopped=Debug session stopped
debug.stop_session_error=Error stopping debug session: {0}
debug.no_stack_info=Warning: No stack information found in message
debug.step_over_to=Step over to
debug.step_in_to=Step into
debug.step_out_to=Step out to
debug.breakpoint_hit=Breakpoint hit
debug.action_info={0}: {1}:{2} ({3} stack frames)
debug.lua_program_stopped=Received Lua program stop command
debug.set_breakpoint=Set breakpoint: {0}:{1}
debug.remove_breakpoint=Remove breakpoint: {0}:{1}
debug.continue_run=Continue running
debug.stop_debug=Stop debugging
debug.stop_confirm_received=Stop confirmation received, closing connection
debug.stop_confirm_timeout=Stop confirmation timeout, force closing connection
debug.send_stop_error=Error sending stop command: {0}
debug.transporter_null=Transporter is null, cannot send stopRun command
debug.step_over=Step over
debug.step_in=Step into
debug.step_out=Step out

# Evaluator messages
eval.failed_parse_response=Evaluation failed: Unable to parse response
eval.failed_error=Evaluation failed: {0}

# Suspend context messages
suspend.parse_stack_failed=Failed to parse stack frame variables response: {0}
suspend.parse_variable_failed=Failed to parse getVariable response: {0}
