# GitHub Actions 工作流名称
name: Build and Release on Push to Main

# 触发工作流的事件
on:
  push:
    branches:
      - main # 当 main 分支有新的推送时触发

# 工作流运行的任务
jobs:
  build-and-release:
    # 使用最新的 Ubuntu 虚拟机环境
    runs-on: ubuntu-latest
    # 赋予工作流写入 Releases 的权限
    permissions:
      contents: write

    steps:
      # 第一步：检出代码
      # 设置 fetch-depth: 0 来获取完整的 git 历史，以便生成更新日志
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 第二步：设置 Java 环境
      # 根据用户要求，使用 Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 第三步：设置 Gradle 环境
      # 使用 Gradle Wrapper 来确保构建环境的一致性
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # 第四步：执行 Gradle 打包命令
      # 使用 -x buildSearchableOptions 来跳过之前导致错误的 'buildSearchableOptions' 任务
      - name: Build with Gradle
        run: ./gradlew buildPlugin -x buildSearchableOptions

      # 第五步：生成 Release 的更新日志 (Release Body)
      # 提取本次推送中包含的所有 commit 信息
      - name: Generate release notes
        id: generate_notes
        run: |
          # 将生成的日志内容赋值给一个名为 "changelog" 的输出变量
          # github.event.before 是推送前的 commit SHA
          # github.event.after 是推送后的 commit SHA
          echo "changelog=$(git log ${{ github.event.before }}..${{ github.event.after }} --pretty=format:'* %s (%h)')" >> $GITHUB_OUTPUT
      
      # 新增步骤：设置发布信息，如此处的日期 <--- 变化点 1
      # 在这里执行 shell 命令，并将结果输出到 GITHUB_ENV，使其成为后续步骤可用的环境变量
      - name: Set Release Info
        id: set_release_info
        run: echo "RELEASE_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      # 第六步：创建 GitHub Release 并上传构建产物
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        # 注意：此处的 env 块已被移除 <--- 变化点 2
        with:
          # 使用前面步骤生成的更新日志作为 Release 的 Body
          body: |
            ## 自动构建产物

            **✨ 本次更新包含以下提交:**
            ${{ steps.generate_notes.outputs.changelog }}
          
          # 引用在上面步骤中计算好的环境变量来创建合法的标签 <--- 变化点 3
          tag_name: release-${{ env.RELEASE_DATE }}-${{ github.sha }}
          
          # Release 的标题
          name: Auto Build - ${{ env.RELEASE_DATE }}
          
          # 标记为预发布版本
          prerelease: true
          
          # 从构建输出目录中找到插件的 zip 包并上传
          files: build/distributions/*.zip
