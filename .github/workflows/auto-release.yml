# GitHub Actions 工作流名称
name: Build and Release on Push to Main

# 触发工作流的事件
on:
  push:
    branches:
      - main # 当 main 分支有新的推送时触发

# 全局环境变量，定义文件路径以便复用
env:
  # --- 修正点：移除了顶层仓库目录名 "IntelliJ-EmmyLua/" ---
  PLUGIN_XML_PATH: src/main/resources/META-INF/plugin.xml

# 工作流运行的任务
jobs:
  build-and-release:
    # 使用最新的 Ubuntu 虚拟机环境
    runs-on: ubuntu-latest
    # 赋予工作流写入权限
    permissions:
      contents: write

    steps:
      # 第一步：检出代码
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 第二步：设置 Java 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 第三步：设置 Gradle 环境
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # 第四步：计算新版本号
      - name: Calculate New Version
        id: versioning
        run: |
          TRACKING_FILE="version.properties"
          INITIAL_COMMIT="3639f63474c46a89fb15be2bd4cc4fac356d8e8c"

          if [ -f "$TRACKING_FILE" ]; then
            source $TRACKING_FILE
            LAST_COMMIT_HASH=$LAST_COMMIT
          else
            # 使用 env 中定义的正确路径
            LAST_VERSION=$(grep -oP '(?<=<version>).*?(?=</version>)' ${{ env.PLUGIN_XML_PATH }})
            LAST_COMMIT_HASH=$INITIAL_COMMIT
            LAST_RELEASE_DATE="2024-01-01"
          fi

          COMMIT_COUNT=$(git rev-list --count $LAST_COMMIT_HASH..${{ github.sha }})
          echo "从 $LAST_COMMIT_HASH 至今有 $COMMIT_COUNT 次新的提交。"
          
          IFS='.' read -r -a V <<< "$LAST_VERSION"
          MAJOR=${V[0]}; MINOR=${V[1]}; PATCH=${V[2]}

          CURRENT_YEAR=$(date +'%Y'); LAST_RELEASE_YEAR=$(date -d "$LAST_RELEASE_DATE" +'%Y')

          if [ "$CURRENT_YEAR" -gt "$LAST_RELEASE_YEAR" ]; then
            MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
          else
            if [ "$COMMIT_COUNT" -gt 15 ]; then
              MINOR=$((MINOR + 1)); PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "计算出的新版本号为: $NEW_VERSION"

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "LAST_COMMIT_HASH=$LAST_COMMIT_HASH" >> $GITHUB_ENV

      # 第五步：生成 HTML 格式的更新日志
      - name: Generate Changelog for plugin.xml
        id: generate_changelog
        run: |
          echo "正在生成 HTML 格式的更新日志..."
          LOG_LI_ITEMS=$(git log ${{ env.LAST_COMMIT_HASH }}..${{ github.sha }} --pretty=format:'      <li>%s (%h)</li>')

          if [ -z "$LOG_LI_ITEMS" ]; then
            LOG_LI_ITEMS="      <li>本次更新没有包含新的代码提交。</li>"
          fi
          
          {
            echo 'html_list<<EOF'
            echo "$LOG_LI_ITEMS"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      # 第六步：更新 plugin.xml (版本号和更新日志)
      - name: Update plugin.xml with Version and Changelog
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = process.env.PLUGIN_XML_PATH;
            const newVersion = process.env.NEW_VERSION;
            const changelogItems = `${{ steps.generate_changelog.outputs.html_list }}`;

            console.log(`正在更新文件: ${path}`);
            console.log(`新版本: ${newVersion}`);
            console.log(`更新日志条目:\n${changelogItems}`);

            const newChangelogBlock = `\n    <strong>${newVersion}</strong>\n    <ul>\n${changelogItems}\n    </ul>\n    `;
            let fileContent = fs.readFileSync(path, 'utf8');
            fileContent = fileContent.replace(/<version>.*<\/version>/, `<version>${newVersion}</version>`);
            console.log('版本号已更新。');
            fileContent = fileContent.replace(/[\s\S]*?/, newChangelogBlock + '');
            console.log('更新日志已注入。');
            fs.writeFileSync(path, fileContent, 'utf8');
            console.log('plugin.xml 文件更新完成。');

      # 第七步：执行 Gradle 打包命令
      - name: Build with Gradle
        run: ./gradlew buildPlugin -x buildSearchableOptions

      # 第八步：创建 GitHub Release 并上传构建产物
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          body: |
            ## 自动构建产物 (v${{ env.NEW_VERSION }})

            **✨ 本次更新包含以下提交:**
            ${{ steps.generate_changelog.outputs.html_list }}
          tag_name: v${{ env.NEW_VERSION }}
          name: Auto Build - v${{ env.NEW_VERSION }}
          prerelease: true
          files: build/distributions/*.zip

      # 第九步：更新版本跟踪文件并提交回仓库
      - name: Update and Commit Version Tracking File
        run: |
          echo "LAST_VERSION=${{ env.NEW_VERSION }}" > version.properties
          echo "LAST_COMMIT=${{ github.sha }}" >> properties
          echo "LAST_RELEASE_DATE=$(date +'%Y-%m-%d')" >> version.properties
          
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add ${{ env.PLUGIN_XML_PATH }} version.properties
          git commit -m "chore(release): 自动更新版本至 ${{ env.NEW_VERSION }}" -m "[skip ci]"
          git push
